import requests


class RestCountriesProvider:
    """Class containing Utility Methods and Constants for
    providing the data from External API RestCountries.eu"""

    SUPPORTED_COUNTRY_FILTERS = ['name', 'iso', 'region']
    EXTERNAL_COUNTRIES_API_BASE_URL = 'https://restcountries.eu/rest/v2'

    @classmethod
    def get_country_url_by_iso(cls, iso):
        return f'{cls.EXTERNAL_COUNTRIES_API_BASE_URL}/alpha/{iso}'

    @classmethod
    def get_country_url_by_name(cls, name):
        return f'{cls.EXTERNAL_COUNTRIES_API_BASE_URL}/name/{name}'

    @classmethod
    def get_country_url_by_region(cls, region):
        return f'{cls.EXTERNAL_COUNTRIES_API_BASE_URL}/region/{region}'

    @classmethod
    def get_filtered_countries_as_json(cls, **filters):
        if not filters:
            return requests.get(cls.get_all_countries_url()).json()

        filters = {k: v for k, v in filters.items()
                   if k in cls.SUPPORTED_COUNTRY_FILTERS}

        if len(filters) > 1:
            all_countries = requests.get(cls.get_all_countries_url()).json()
            results = []
            for country in all_countries:
                filters_items = filters.items()
                is_matched = cls.check_is_country_matched(country,
                                                          filters_items)
                if is_matched:
                    results.append(country)
            return results
        else:
            key = next(iter(filters))
            url = getattr(cls, f'get_country_url_by_{key}')(filters[key])
            results = requests.get(url).json()
            # If there was an error return empty list,
            # otherwise if is just 1 result return it as list
            if isinstance(results, dict):
                return [] if results.get('status', None) else [results]

            return results

    @staticmethod
    def check_is_country_matched(country, filters_items):
        is_matched = True
        for key, val in filters_items:
            # Map the 'iso' to the 'alpha2Code',
            # because this is how it is defined in the External API
            if key == 'iso':
                key = 'alpha2Code'
            # If the key is name check if contains the value don't match exact
            if key == 'name':
                if val not in country.get(key, None):
                    is_matched = False
                    break
            else:
                if not country.get(key, None) == val:
                    is_matched = False
                    break
        return is_matched

    @classmethod
    def get_all_countries_url(cls):
        return f'{cls.EXTERNAL_COUNTRIES_API_BASE_URL}/all'

    @classmethod
    def extract_defined_fields_only(cls, extract_class, passed_fields):
        """This utility method will be used to extract only defined fields
           from the External API."""

        # Skipping ID because it is automatically generated by Django
        defined_fields = [field.attname for field
                          in extract_class._meta.fields
                          if field.attname != 'id']

        extracted_fields = {k: v for k, v in passed_fields.items()
                            if k in defined_fields}
        return extracted_fields


class CountriesIOProvider:
    """Class containing Utility Methods and Constants for
    providing the data from External API Country.io"""

    ISO_CODES_API_URL = 'http://country.io/names.json'

    @classmethod
    def get_iso2_codes(cls):
        response_data = requests.get(cls.ISO_CODES_API_URL).json()
        return response_data

    @classmethod
    def get_iso2_choices(cls):
        res = []
        iso2_items = cls.get_iso2_codes().items()
        for k, v in iso2_items:
            res.append((k, v))
        return res
